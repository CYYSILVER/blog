<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yinyi&#39;s blog</title>
  
  <subtitle>分享前端的知识，经验</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://cyysilver.github.io/blog/"/>
  <updated>2019-08-11T09:09:36.560Z</updated>
  <id>http://cyysilver.github.io/blog/</id>
  
  <author>
    <name>Chen Yinyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>了解css中的block formatting context(块级上下文) 以及 display: flow-root</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-31-bfc.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-31-bfc.html</id>
    <published>2019-07-31T15:07:24.000Z</published>
    <updated>2019-08-11T09:09:36.560Z</updated>
    
    <content type="html"><![CDATA[<p>块级上下文挺起来很抽象，<a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting" target="_blank" rel="noopener">W3C</a> 中是这样解释的：</p><hr><ol><li>floats, absolute定位, 不是块级元素的块级容器(列如<code>inline-block, table-cells, table-captions</code>)，以及display为<code>overflow</code>等不是<code>visible</code>属性的元素，会为它们包含的内容建立新的block formatting context</li><li>在block formatting context中，以容器的顶端为开始，Box一个接一个的垂直排列，两个相邻box之间的距离由<code>margin</code>决定，在相同的block formatting context中，两个相邻的块级Box会产生<strong>外边距合并</strong> (这是重点)</li><li>在block formatting context中，每一个Box的左边界紧挨着容器左边界(如果是从右到左的布局，那么触碰到右边界)。 在floats元素依然满足此要求(但是Box内的行框由于float可能会变窄)，除非建立了新的block formatting context(<strong>这种情况下box会由于float元素而变窄</strong>)</li></ol><hr><p>上面的话可以总结为：</p><p><strong>block formatting context就是页面上的一个隔离的独立容器，容器内的子元素不会影响到外面的元素。反之如此</strong></p><p>看了这么多，是不是感觉很抽象，没关系，我们与其去研究这些抽象的文字，不如来看看block formatting context能做什么。</p><hr><a id="more"></a><h1 id="了解BFC-Block-Formatting-Context-块级上下文"><a href="#了解BFC-Block-Formatting-Context-块级上下文" class="headerlink" title="了解BFC(Block Formatting Context)块级上下文"></a>了解BFC(Block Formatting Context)块级上下文</h1><h2 id="BFC的创建"><a href="#BFC的创建" class="headerlink" title="BFC的创建"></a>BFC的创建</h2><p>通过上面的介绍可以知道，设置display、position、float、overflow均可以为元素创建BFC</p><p>这里设置overflow: hidden，这样就创建了bfc</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  Some Content here</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>同一个BFC里面的相邻元素会产生外边距合并</p><p>如下，设置的p的上下外边距为10px，合并后仍为10px</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sibling 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sibling 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background</span>: orange;</span><br><span class="line">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background</span>: skyblue;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/articles/2019-07-31-bfc/collapse.jpg" alt="collapsing margins"></p><h1 id="了解了BFC能做些什么？"><a href="#了解了BFC能做些什么？" class="headerlink" title="了解了BFC能做些什么？"></a>了解了BFC能做些什么？</h1><p>下面介绍使用bfc</p><ul><li>阻止外边距合并</li><li>清除浮动</li><li>防止文字环绕</li></ul><p>下面一起来看看吧</p><h2 id="阻止外边距合并"><a href="#阻止外边距合并" class="headerlink" title="阻止外边距合并"></a>阻止外边距合并</h2><p><strong>让两个元素不在同一个BFC中就可以阻止外边距合并</strong></p><p>下面将Sibling 3的容器设置为新的BFC，第三个p和第二个p的外边距就不会合并</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sibling 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sibling 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"newBFC"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Sibling 3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line"> <span class="hljs-attribute">background</span>: orange;</span><br><span class="line"> <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line"><span class="hljs-attribute">background</span>: skyblue;</span><br><span class="line"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.newBFC</span> &#123;</span><br><span class="line"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><img src="/blog/articles/2019-07-31-bfc/preventCollapse.png" alt="preventCollapse"></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="css,result" data-user="CYSILVER" data-slug-hash="PMyOpz" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="prevent margin collapse">  <span>See the Pen <a href="https://codepen.io/CYSILVER/pen/PMyOpz/" target="_blank" rel="noopener">  prevent margin collapse</a> by Chen Yinyi (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>## 清除浮动<p><strong>设置BFC能够清除浮动</strong></p><p>BFC中的子元素不会影响外部元素，所以在BFC中，容器能够撑开包含浮动元素，所以设置bfc能够实现清除浮动</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Sibling 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Sibling 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background</span>: orange;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">float</span>: left;</span><br><span class="line">  <span class="hljs-attribute">background</span>: skyblue;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/articles/2019-07-31-bfc/containFloat.jpg" alt="containing floats"></p><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="css,result" data-user="CYSILVER" data-slug-hash="PMyOmz" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="bfc clear float">  <span>See the Pen <a href="https://codepen.io/CYSILVER/pen/PMyOmz/" target="_blank" rel="noopener">  bfc clear float</a> by Chen Yinyi (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="防止文字环绕"><a href="#防止文字环绕" class="headerlink" title="防止文字环绕"></a>防止文字环绕</h2><p>首先我们再回顾下上面的BFC描述:</p><blockquote><p>在block formatting context中，每一个Box的左边界紧挨着容器左边界(如果是从右到左的布局，那么触碰到右边界)。 在floats元素依然满足此要求(<strong>但是Box内的行框由于float可能会变窄</strong>)，除非建立了新的block formatting context(<strong>这种情况下box会由于float元素而变窄</strong>)</p></blockquote><p>也就是说在默认情况下，float元素盖在p上面后，文字的行框会由于float变窄，所以就会产生文字环绕的现象。由于bfc的特性：<strong>内部布局不会影响到外部，反之如此</strong>，通过给段落<code>&lt;p&gt;</code>建立bfc，就能实现阻止文字环绕的效果</p><p><img src="/blog/articles/2019-07-31-bfc/preventWrap.png" alt="preventWrap"></p><p>下面的代码给p元素设置了overflow: hidden，创建了bfc，最终实现防止文字环绕</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"floated"</span>&gt;</span>I'm floated<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic modi laudantium unde qui tenetur labore. Dolor quaerat soluta nobis facere, obcaecati temporibus consectetur illo atque. Non excepturi voluptates ducimus odit?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background</span>: orange;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">float</span>: left;</span><br><span class="line">  <span class="hljs-attribute">background</span>: skyblue;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">p</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/articles/2019-07-31-bfc/1565493883869.png" alt="1565493883869"></p><h3 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h3><p class="codepen" data-height="444" data-theme-id="0" data-default-tab="html,result" data-user="CYSILVER" data-slug-hash="ZgqayR" style="height: 444px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="bfc clear text wrap">  <span>See the Pen <a href="https://codepen.io/CYSILVER/pen/ZgqayR/" target="_blank" rel="noopener">  bfc clear text wrap</a> by Chen Yinyi (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="设置display-flow-root"><a href="#设置display-flow-root" class="headerlink" title="设置display: flow-root"></a>设置display: flow-root</h1><p>设置元素属性display: flow-root可以为元素创建新的bfc</p><ul><li><p>它不像overflow: hidden那样会将溢出内容隐藏</p></li><li><p>也不会像overflow: scroll那样会产生滚动条</p></li><li><p>它就是单纯的创建bfc</p></li></ul><p>通过这样的理解，你就能明白这个属性能干什么了，上面所讲的列子，都能通过设置display: flow-root</p><ul><li>阻止外边距合并</li><li>清除浮动</li><li>防止文字环绕</li></ul><p>对于[浏览器支持情况 ]([<a href="https://caniuse.com/#search=display%3A%20flow-root]" target="_blank" rel="noopener">https://caniuse.com/#search=display%3A%20flow-root]</a>(<a href="https://caniuse.com/#search=display%3A" target="_blank" rel="noopener">https://caniuse.com/#search=display%3A</a> flow-root)) 现阶段有部分浏览器不支持此属性</p><p><img src="/blog/articles/2019-07-31-bfc/1565494484171.png" alt="1565494484171"></p><p>列如上图中的IE、Opera Mini、 IOS Safari等</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    对于BFC的定义及使用就介绍到这里了，当初看那些bfc的文章介绍的时候，都是统统给你搬出来一堆概念，咬文嚼字看完几遍后依旧看不懂。最后我改变了学习方向，与其去深究定义，不如去看看它能够做什么。你问我bfc的严格定义，我可能也不能好好的回答上来，不过掌握了这些方法，相信你会对bfc有了新的理解。</p><p>​    我想说的是，学习不要卡在一个死胡同，定义看不懂，就多去实践，看看有什么效果，再返回去理解定义的内容，这样也许会帮助你更快的理解，同时留下的印象也就更深。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;块级上下文挺起来很抽象，&lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html#block-formatting&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;W3C&lt;/a&gt; 中是这样解释的：&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;floats, absolute定位, 不是块级元素的块级容器(列如&lt;code&gt;inline-block, table-cells, table-captions&lt;/code&gt;)，以及display为&lt;code&gt;overflow&lt;/code&gt;等不是&lt;code&gt;visible&lt;/code&gt;属性的元素，会为它们包含的内容建立新的block formatting context&lt;/li&gt;
&lt;li&gt;在block formatting context中，以容器的顶端为开始，Box一个接一个的垂直排列，两个相邻box之间的距离由&lt;code&gt;margin&lt;/code&gt;决定，在相同的block formatting context中，两个相邻的块级Box会产生&lt;strong&gt;外边距合并&lt;/strong&gt; (这是重点)&lt;/li&gt;
&lt;li&gt;在block formatting context中，每一个Box的左边界紧挨着容器左边界(如果是从右到左的布局，那么触碰到右边界)。 在floats元素依然满足此要求(但是Box内的行框由于float可能会变窄)，除非建立了新的block formatting context(&lt;strong&gt;这种情况下box会由于float元素而变窄&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;上面的话可以总结为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;block formatting context就是页面上的一个隔离的独立容器，容器内的子元素不会影响到外面的元素。反之如此&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看了这么多，是不是感觉很抽象，没关系，我们与其去研究这些抽象的文字，不如来看看block formatting context能做什么。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="css" scheme="http://cyysilver.github.io/blog/categories/css/"/>
    
    
      <category term="css" scheme="http://cyysilver.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动解决方案，使用.clearfix类选择器</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-30-clearfix.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-30-clearfix.html</id>
    <published>2019-07-30T15:07:24.000Z</published>
    <updated>2019-08-11T09:09:36.554Z</updated>
    
    <content type="html"><![CDATA[<p>这个东西其实很简单</p><p><strong>使用css</strong></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">display</span>: block;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>;</span><br><span class="line">    <span class="hljs-attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>直接把要清除浮动的添加clearfix就行了</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><strong>html</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"floated"</span>&gt;</span>floated<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>css</strong></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">display</span>: block;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;</span><br><span class="line">    <span class="hljs-attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="line">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(83, 152, 197);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.floated</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">    <span class="hljs-attribute">float</span>: left;</span><br><span class="line">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(224, 173, 107);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/articles/2019-07-30-clearfix/1564491264766.png" alt="1564491264766"></p><p>容器未被撑开</p><p><strong>添加clearfix</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container clearfix"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"floated"</span>&gt;</span>floated<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/blog/articles/2019-07-30-clearfix/1564491322032.png" alt="1564491322032"></p><p>容器被撑开，浮动清除</p><p><strong>clearfix还可以加入flow-root属性</strong></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="hljs-attribute">display</span>: block;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>;</span><br><span class="line">    <span class="hljs-attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/* 如果浏览器支持 flow-root属性 */</span></span><br><span class="line">@supports(display: flow-root) &#123;</span><br><span class="line">    <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="hljs-attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-selector-class">.clearfix</span> &#123;</span><br><span class="line">        <span class="hljs-attribute">display</span>: flow-root</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于flow-root，我的<a href="/blog/articles/2019-07-31-bfc.html">这篇文章</a>有讲解</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个东西其实很简单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用css&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-attribute&quot;&gt;clear&lt;/span&gt;: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css" scheme="http://cyysilver.github.io/blog/categories/css/"/>
    
    
      <category term="css" scheme="http://cyysilver.github.io/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>es6中Promise.all、Promise.race的实现及其用法</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-30-promise-all-race.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-30-promise-all-race.html</id>
    <published>2019-07-30T13:26:16.000Z</published>
    <updated>2019-08-11T09:09:36.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 灵魂配图 </p></blockquote><p>在es6中，新增了Promise对象</p><p>其中有两个方法</p><ul><li>Promise.all()</li><li>Promise.race()</li></ul><p>都是用于将多个Promise实例包装成另一个实例   </p><p><strong>下面我会对两种方法进行介绍，以及自己使用js实现他们的方法</strong></p><a id="more"></a><h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h1><p>接受一个数组，返回Promise对象：</p><ul><li><code>let p = Promise.all([p1, p2, p3])</code></li><li>当p1,p2,p3的状态都变为<code>fulfilled</code>，其p的状态才变为<code>fulfilled</code>。p1,p2,p3的resolve值组成数组传递给p的resolve值</li><li>p1,p2,p3中有一个状态变为<code>rejected</code>，那么p的状态变为<code>rejected</code>，reject的值为该promise的reject值</li></ul><h2 id="看个例子就懂了"><a href="#看个例子就懂了" class="headerlink" title="看个例子就懂了"></a>看个例子就懂了</h2><p><strong>如下面代码，Promise.all的resolve值为<code>[&#39;p1&#39;, &#39;p2&#39;]</code></strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 模拟异步</span></span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="hljs-string">'p1'</span>)</span><br><span class="line">  &#125;, <span class="hljs-number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 模拟异步</span></span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="hljs-string">'p2'</span>)</span><br><span class="line">  &#125;, <span class="hljs-number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Promise</span>.all([p1, p2]).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(res)  <span class="hljs-comment">// 输出['p1', 'p2']</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="hljs-string">'p3'</span>)</span><br><span class="line">    &#125;, <span class="hljs-number">1500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Promise</span>.all([p2, p3]).then(<span class="hljs-literal">null</span>, (res) =&gt; &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(res) <span class="hljs-comment">// 输出'p3'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>代码如下，要点都写在注释里了</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PromiseAll</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 把每个resolve的结果存放在result</span></span><br><span class="line">  <span class="hljs-keyword">let</span> result = []</span><br><span class="line">  <span class="hljs-comment">// 记录arr的长度</span></span><br><span class="line">  <span class="hljs-keyword">let</span> length = arr.length</span><br><span class="line">  <span class="hljs-keyword">let</span> curlength = <span class="hljs-number">0</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.forEach(<span class="hljs-function">(<span class="hljs-params">p, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-comment">// 使用 Promise.resolve()将不是Promise对象转换为Promise对象</span></span><br><span class="line">      <span class="hljs-comment">// 调用每一个promise对象的then方法</span></span><br><span class="line">      <span class="hljs-built_in">Promise</span>.resolve(p).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// 调用之后将结果存入result</span></span><br><span class="line">        result[index] = res</span><br><span class="line">        curlength++</span><br><span class="line">        <span class="hljs-comment">// 判断是否全部执行完毕</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (result.length === curlength) &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment">// 如果出错，直接reject</span></span><br><span class="line">      &#125;, (err) =&gt; &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h1><p>接受一个数组，返回Promise对象：</p><ul><li><code>let p = Promise.race([p1, p2, p3])</code><ul><li>当p1,p2,p3中最先变为<code>fulfill</code>或者<code>rejected</code>的Promise对象的reject或resolve值，就为p的reject或resolve值</li></ul></li></ul><h2 id="看个例子就懂了-1"><a href="#看个例子就懂了-1" class="headerlink" title="看个例子就懂了"></a>看个例子就懂了</h2><p><strong>下面代码p2状态更快变为<code>fulfilled</code>输出值为p2</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 模拟异步</span></span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="hljs-string">'p1'</span>)</span><br><span class="line">  &#125;, <span class="hljs-number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 模拟异步</span></span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="hljs-string">'p2'</span>)</span><br><span class="line">  &#125;, <span class="hljs-number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Promise</span>.race([p1, p2]).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(res) <span class="hljs-comment">// 'p2'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h2><p><strong>该方法要比all简单</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PromiseRace</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.forEach(<span class="hljs-function">(<span class="hljs-params">p, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-comment">// 使用 Promise.resolve()将不是Promise对象转换为Promise对象</span></span><br><span class="line">      <span class="hljs-comment">// 调用每一个promise对象的then方法</span></span><br><span class="line">      <span class="hljs-comment">// 之后直接resolve或reject</span></span><br><span class="line">      <span class="hljs-built_in">Promise</span>.resolve(p).then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(result)      </span><br><span class="line">      &#125;, (err) =&gt; &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是Promise.all和Promise.race的介绍以及源码实现。</p><p>还是比较简单，不过有个注意的点就是使用Promise.resolve(p)将非Promise对象转为Promise对象，这样才能调用then方法</p>]]></content>
    
    <summary type="html">
    
      介绍Promise.all和Promise.race的源码实现
    
    </summary>
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/categories/javascript/"/>
    
      <category term="es6" scheme="http://cyysilver.github.io/blog/categories/javascript/es6/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="es6" scheme="http://cyysilver.github.io/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>CSS动画-auto属性的过渡</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-29-CSS%E5%8A%A8%E7%94%BB-auto%E5%B1%9E%E6%80%A7%E7%9A%84%E8%BF%87%E6%B8%A1.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-29-CSS动画-auto属性的过渡.html</id>
    <published>2019-07-29T07:20:24.000Z</published>
    <updated>2019-08-11T09:09:36.559Z</updated>
    
    <content type="html"><![CDATA[<p>通常，你想要通过<code>css transition</code>来过渡属性，然后使用了下面代码<code>transition: height 0.5s linear</code></p><p>然后又使用了 <code>height: auto</code>来自适应高度<code>height: 0</code> -&gt; <code>height: auto</code></p><p>然后发现动画就像没发生一样，直接就在0和auto两个状态之间直接切换</p><p>你可能会认为出现了什么bug，或者代码写错了，其实不然</p><a id="more"></a><p>你可能发生下图所示的情况</p><p><img src="/blog/articles/2019-07-29-CSS%E5%8A%A8%E7%94%BB-auto%E5%B1%9E%E6%80%A7%E7%9A%84%E8%BF%87%E6%B8%A1/auto-problem.gif" alt="auto-problem"></p><blockquote><p>在这篇文章中，都使用高度进行说明，这张图里的宽度与高度是一个道理</p></blockquote><p>这个问题目前还不能简单通过css完全解决</p><p>下面是我分享的4个解决方案</p><blockquote><p>本文章部分资料以及Code Pen代码引用于 <a href="https://css-tricks.com/using-css-transitions-auto-dimensions/" target="_blank" rel="noopener">css-tricks.com</a>， 里面有很多关于css的技巧，值得学习</p></blockquote><h1 id="这是浏览器bug"><a href="#这是浏览器bug" class="headerlink" title="这是浏览器bug?"></a>这是浏览器bug?</h1><p>查阅Mozilla Developer Network docs， <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions#Specifications" target="_blank" rel="noopener">auto 属性值被排除在transition规范之外</a>。 这样做的原因是因为，如果transition一个元素的高度到auto，浏览器将会进行页面重排(reflow)，重排页面会计算其他元素的位置，并且在每一个动画帧都会进行这样的操作，这意味着将花费巨大的开销。</p><p>虽然设置height: auto达到不了我们想要的效果，但是可以通过其他方法实现，下面介绍4种方式</p><ol><li>使用max-height</li><li>使用transform: scaleY()</li><li>使用Javascript</li><li>使用Flex容器</li></ol><h1 id="解决方案-1-使用-max-height"><a href="#解决方案-1-使用-max-height" class="headerlink" title="解决方案 1: 使用 max-height"></a>解决方案 1: 使用 max-height</h1><p>这个方法可能是最容易搜索到的方法，但是不太理想，不过在一些情况下，还是值得使用</p><p>具体方法大概如下：</p><ul><li>​    设置 transition: max-height 0.3s ease-out</li><li>​    max-height: 0</li><li>​    过渡到一个该容器能达到的最大值，比如 1000px</li><li>​    max-height: 1000px</li></ul><p>这里的max-height必须保证大于容器auto的height，不然就会出现内容显示不全的情况</p><p><img src="/blog/articles/2019-07-29-CSS%E5%8A%A8%E7%94%BB-auto%E5%B1%9E%E6%80%A7%E7%9A%84%E8%BF%87%E6%B8%A1/GIF-1563106416380.gif" alt="GIF"></p><h2 id="Code-Pen演示"><a href="#Code-Pen演示" class="headerlink" title="Code Pen演示"></a>Code Pen演示</h2><blockquote><p>在以下的code pen演示中都使用的SCSS，如果需查看CSS，请点击下面的View Compiled按钮</p></blockquote><p>主要注意.section这部分</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.section</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>:hidden;</span><br><span class="line">  <span class="hljs-attribute">transition</span>:max-height <span class="hljs-number">0.3s</span> ease-out; <span class="hljs-comment">/* 设置max-height的transition属性 */</span></span><br><span class="line">  <span class="hljs-attribute">height</span>:auto;</span><br><span class="line">  <span class="hljs-attribute">max-height</span>:<span class="hljs-number">600px</span>; <span class="hljs-comment">/* 这里仍然需要硬编码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.section</span><span class="hljs-selector-class">.collapsed</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">max-height</span>:<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe height="600" style="width: 100%;" scrolling="no" title="Smooth Collapsing div with max-height" src="//codepen.io/CYSILVER/embed/dBERrY/?height=265&theme-id=0&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/CYSILVER/pen/dBERrY/" target="_blank" rel="noopener">Smooth Collapsing div with max-height</a> by Chen Yinyi  (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>可能你也发现了，这里的max-height也是硬编码，大多数情况下也不好确定容器的最大内容高度。</p><p>其次，设置的transition的时间和变换函数和实际展示出来的并不一致</p><p>打个比方</p><ul><li>​    内容的实际最高宽度为100px</li><li>​    你设置了:<ul><li>​        max-height: 0   -&gt;   max-height: 1000px</li><li>​        transition: max-height 10s linear;</li></ul></li><li>​    那么这里的10s的transition显示在浏览器上就只有1s，因为1s后max-height: 100px已经达到容器最大高度，后面的max-height的变化不会体现出来</li></ul><p>​    </p><h1 id="解决方案-2-transform-scaleY"><a href="#解决方案-2-transform-scaleY" class="headerlink" title="解决方案 2: transform: scaleY()"></a>解决方案 2: transform: scaleY()</h1><p>该方法不会触发页面重排(reflow)</p><p>设置方法很简单</p><p>设置 transform: scaleY(0) 到 transform: scaleY(1) 即可完成高度的缩放</p><p>该方法不会触发重排，所以元素位置不会改变，同时元素的内容会产生挤压的形变效果</p><p><img src="/blog/articles/2019-07-29-CSS%E5%8A%A8%E7%94%BB-auto%E5%B1%9E%E6%80%A7%E7%9A%84%E8%BF%87%E6%B8%A1/GIF-1563106477677.gif" alt="GIF"></p><h2 id="Code-Pen-演示"><a href="#Code-Pen-演示" class="headerlink" title="Code Pen 演示"></a>Code Pen 演示</h2><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.section</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>:hidden;</span><br><span class="line">  <span class="hljs-attribute">transition</span>:transform <span class="hljs-number">0.3s</span> ease-out; <span class="hljs-comment">/* 设置transform的transition属性 */</span></span><br><span class="line">  <span class="hljs-attribute">height</span>:auto;</span><br><span class="line">  <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">scaleY</span>(1); <span class="hljs-comment">/* 可以不用显示声明，但最好的做法是在这里声明一下 */</span></span><br><span class="line">  <span class="hljs-attribute">transform-origin</span>:top; <span class="hljs-comment">/* 设置transform的起始点，不然就会从中间开始缩放 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.section</span><span class="hljs-selector-class">.collapsed</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">scaleY</span>(0); <span class="hljs-comment">/* 设置为0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe height="600" style="width: 100%;" scrolling="no" title="Smooth Collapsing div with scaleY()" src="//codepen.io/CYSILVER/embed/jjoYOp/?height=265&theme-id=0&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/CYSILVER/pen/jjoYOp/" target="_blank" rel="noopener">Smooth Collapsing div with scaleY()</a> by Chen Yinyi  (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><p>该方法普遍不适用</p><p>产生的形变效果大部分时候不是我们想要的，也不够没关</p><p>不会产生页面重排，折叠后的位置留空，大部分时候不是我们想要的情况</p><h1 id="解决方案-3-Javascript（推荐）"><a href="#解决方案-3-Javascript（推荐）" class="headerlink" title="解决方案 3: Javascript（推荐）"></a>解决方案 3: Javascript（推荐）</h1><p>该方法使用js获取到内容的最大高度，然后就能使用固定的高度进行transition了</p><p>基本思路是使用，获取到元素的高度</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.scrollHeight</span><br></pre></td></tr></table></figure><p>然后设置</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.style.height = scrollHeight</span><br></pre></td></tr></table></figure><p>点击后设置</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.style.height = <span class="hljs-number">0</span></span><br></pre></td></tr></table></figure><p>这样就能实现css的transition效果，并且移除了硬编码，更加灵活，适用于任意高度的容器</p><p><img src="/blog/articles/2019-07-29-CSS%E5%8A%A8%E7%94%BB-auto%E5%B1%9E%E6%80%A7%E7%9A%84%E8%BF%87%E6%B8%A1/GIF-1563107549531.gif" alt="GIF"></p><h2 id="Code-Pen-演示-1"><a href="#Code-Pen-演示-1" class="headerlink" title="Code Pen 演示"></a>Code Pen 演示</h2><p>要点在这两部分</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> sectionHeight = element.scrollHeight; <span class="hljs-comment">// 获取到内容的高度</span></span><br><span class="line">element.style.height = sectionHeight + <span class="hljs-string">'px'</span>; <span class="hljs-comment">// 设置Height</span></span><br></pre></td></tr></table></figure><p>关于scrollHeight</p><blockquote><p><strong>Element.scrollHeight</strong> 这个只读属性是一个元素内容高度的度量，包括由于溢出导致的视图中不可见内容。</p></blockquote><p>我这里放个图大家就知道了</p><p><img src="/blog/articles/2019-07-29-CSS%E5%8A%A8%E7%94%BB-auto%E5%B1%9E%E6%80%A7%E7%9A%84%E8%BF%87%E6%B8%A1/scrollHeight.png" alt="scrollHeight"></p><iframe height="600" style="width: 100%;" scrolling="no" title="Smooth Collapsing div with Javascript" src="//codepen.io/CYSILVER/embed/gNJorx/?height=265&theme-id=0&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/CYSILVER/pen/gNJorx/" target="_blank" rel="noopener">Smooth Collapsing div with Javascript</a> by Chen Yinyi  (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>这里使用到了<code>requestAnimationFrame()</code>，关于这个我会在之后的博文讲解。</p><p>下面是我写的另外一种做法，比这个要直观一点</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.dropdown-nav__title'</span>).forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    item.addEventListener(</span><br><span class="line">      <span class="hljs-string">'click'</span>,</span><br><span class="line">      (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 利用闭包存储状态</span></span><br><span class="line">        <span class="hljs-keyword">let</span> opened = <span class="hljs-literal">false</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">          <span class="hljs-keyword">let</span> scrollHeight = event.target.nextElementSibling.scrollHeight</span><br><span class="line">          requestAnimationFrame(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 切换height</span></span><br><span class="line">            event.target.nextElementSibling.style.height = opened</span><br><span class="line">              ? <span class="hljs-string">'0'</span></span><br><span class="line">              : <span class="hljs-string">`<span class="hljs-subst">$&#123;scrollHeight&#125;</span>px`</span></span><br><span class="line">            opened = !opened</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)() <span class="hljs-comment">//立即执行函数，返回内部的function</span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><iframe height="600" style="width: 100%;" scrolling="no" title="dropDown-menu" src="//codepen.io/CYSILVER/embed/agrEEd/?height=265&theme-id=0&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/CYSILVER/pen/agrEEd/" target="_blank" rel="noopener">dropDown-menu</a> by Chen Yinyi  (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe> <h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><p>同样的，这里没有避免掉页面重排的问题</p><p>不过在某些特定的情况下，可以通过使用绝对定位来避免页面重排，比如导航栏的下拉菜单如果需要设置动画，就不需要重排页面。</p><h1 id="解决方案-4-FlexBox-额外方式"><a href="#解决方案-4-FlexBox-额外方式" class="headerlink" title="解决方案 4: FlexBox (额外方式)"></a>解决方案 4: FlexBox (额外方式)</h1><p>之所以称之为额外方式，是因为从技术上来说该方式没有达到预期的效果，不过却是另外一种不错的方法</p><p>如果你还不够了解flexbox 和 flex-grow两个属性，推荐阅读</p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰的Flex 布局教程</a></p><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">A Complete Guide to FlexBox (英文)</a></p><p>这里的话主要就是用到的flex这个属性了(实质上为flex-grow)</p><p><img src="/blog/articles/2019-07-29-CSS%E5%8A%A8%E7%94%BB-auto%E5%B1%9E%E6%80%A7%E7%9A%84%E8%BF%87%E6%B8%A1/GIF-1563114031722.gif" alt="GIF"></p><h2 id="Code-Pen-演示-2"><a href="#Code-Pen-演示-2" class="headerlink" title="Code Pen 演示"></a>Code Pen 演示</h2><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.section</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>:hidden;<span class="hljs-comment">/* 注意这里是关键 */</span></span><br><span class="line">  <span class="hljs-attribute">transition</span>:flex <span class="hljs-number">0.3s</span> ease-out; <span class="hljs-comment">/* 设置flex的transition */</span></span><br><span class="line">  <span class="hljs-attribute">height</span>:auto;</span><br><span class="line">  <span class="hljs-attribute">flex</span>:<span class="hljs-number">1</span>;<span class="hljs-comment">/* 设置flex为1，或者1以上，即容器能够自动伸长，关于这个值的作用请见flexbox的教程 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.section</span><span class="hljs-selector-class">.collapsed</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/* 设置flex为0，即容器不会自动伸长 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意上面的</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">overflow</span>: <span class="hljs-selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure><p>这句话是关键，可替换为</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">min-height</span>: 0;</span><br></pre></td></tr></table></figure><p>因为默认情况下，元素不会缩短至小于内容框尺寸，若想改变这一状况，请设置元素的<code>min-width</code>与 <code>min-height</code>属性。同样的设置<code>overflow: hidden</code>也可达到相同效果</p><iframe height="600" style="width: 100%;" scrolling="no" title="Smooth Collapsing div with Flexbox" src="//codepen.io/CYSILVER/embed/wLbyNa/?height=265&theme-id=0&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/CYSILVER/pen/wLbyNa/" target="_blank" rel="noopener">Smooth Collapsing div with Flexbox</a> by Chen Yinyi  (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>这又是另一种效果，所以说是一种额外的解决方法。</p><p>不过这种方法利用了flexbox，更加灵活</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这四种方式各有优缺点，没有优劣，不过个人还是比较喜欢用js的方式，不过至于到底该用哪个，根据你的需求和情况而定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常，你想要通过&lt;code&gt;css transition&lt;/code&gt;来过渡属性，然后使用了下面代码&lt;code&gt;transition: height 0.5s linear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后又使用了 &lt;code&gt;height: auto&lt;/code&gt;来自适应高度&lt;code&gt;height: 0&lt;/code&gt; -&amp;gt; &lt;code&gt;height: auto&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后发现动画就像没发生一样，直接就在0和auto两个状态之间直接切换&lt;/p&gt;
&lt;p&gt;你可能会认为出现了什么bug，或者代码写错了，其实不然&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://cyysilver.github.io/blog/categories/css/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="css" scheme="http://cyysilver.github.io/blog/tags/css/"/>
    
      <category term="animation" scheme="http://cyysilver.github.io/blog/tags/animation/"/>
    
      <category term="css动画" scheme="http://cyysilver.github.io/blog/tags/css%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>javascript性能优化之debounce与throttle</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-28-debounce.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-28-debounce.html</id>
    <published>2019-07-28T15:07:35.000Z</published>
    <updated>2019-08-11T09:09:36.554Z</updated>
    
    <content type="html"><![CDATA[<p><strong>消抖(<code>debounce</code>)</strong>:</p><ul><li>当函数被调用后，n秒之后才会触发该函数，如果在此期间函数再次被调用，则重新开始计时，n秒之后才会触发该函数。   </li></ul><p>其作用是为了避免某个事件在短时间内连续触发从而影响性能，也可用于避免在一定时间内重复提交表单等。   </p><p><strong>节流(<code>throttle</code>):</strong></p><ul><li>函数被调用后，立即触发该函数，在之后的n秒之内不能再次重复触发。   </li></ul><p>该函数可以用于限制浏览器scroll，mousemove等高频触发事件的触发频率   </p><p><strong>下面介绍<code>debounce</code>和<code>throttle</code>的实现方式</strong>   </p><a id="more"></a><p>这两种方法在lodash里已经给封装好了，下面用原生js实现</p><h1 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h1><p>利用闭包，设置一个timer：</p><ul><li>每次执行都clearTimeout(timer)</li><li>每次执行设置timer = setTimeout()执行函数</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 存储timer</span></span><br><span class="line">  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// 如果已经设置了 timer，将其清空，防止未执行的timer执行</span></span><br><span class="line">      clearTimeout(timer) </span><br><span class="line">      timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// delay后执行函数，使用es6语法，给函数传入参数</span></span><br><span class="line">        <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 传入this和参数</span></span><br><span class="line">        func.apply(<span class="hljs-keyword">this</span>, args)</span><br><span class="line"></span><br><span class="line">      &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="debounce实例"><a href="#debounce实例" class="headerlink" title="debounce实例"></a>debounce实例</h2><p>在input事件使用debounce，减少触发次数，这里设置延迟为1秒，是不是有点像搜索引擎的提示呈现</p><p><img src="/blog/articles/2019-07-28-debounce/GIF.gif" alt="GIF"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"debounce"</span>/&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>debounce test<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">const</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'input'</span>)</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'p'</span>)</span></span><br><span class="line"><span class="hljs-javascript">input.addEventListener(<span class="hljs-string">'input'</span>, debounce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span></span><br><span class="line">  p.innerText = e.target.value</span><br><span class="line">&#125;, 1000))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, delay</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-comment">// 存储timer</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 如果已经设置了 timer，将其清空，防止未执行的timer执行</span></span></span><br><span class="line">      clearTimeout(timer) </span><br><span class="line"><span class="hljs-javascript">      timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// delay后执行函数，使用es6语法，给函数传入参数</span></span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-comment">// 传入this和参数</span></span></span><br><span class="line"><span class="hljs-javascript">        func.apply(<span class="hljs-keyword">this</span>, args)</span></span><br><span class="line"></span><br><span class="line">      &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="codepen"><a href="#codepen" class="headerlink" title="codepen"></a>codepen</h2><iframe height="265" style="width: 100%;" scrolling="no" title="debounce" src="//codepen.io/CYSILVER/embed/pMeQGv/?height=265&theme-id=0&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/CYSILVER/pen/pMeQGv/" target="_blank" rel="noopener">debounce</a> by Chen Yinyi  (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h1 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h1><p>利用闭包，设置一个exec记录当前函数执行状态：</p><ul><li>若正则执行，则跳过if，直接退出函数</li><li>若没有在执行，则执行函数，设置exec为true，一段时间后置为false</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 记录当前函数是否正在被执行</span></span><br><span class="line">  <span class="hljs-keyword">let</span> exec = <span class="hljs-literal">false</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 如果该函数未在执行</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (!exec)&#123;</span><br><span class="line">      <span class="hljs-comment">// 执行该函数</span></span><br><span class="line">      <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">      func.apply(<span class="hljs-keyword">this</span>, args)</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-comment">// 设置执行为true</span></span><br><span class="line">      exec = <span class="hljs-literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 在delayh后设置为false</span></span><br><span class="line">      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">        exec = <span class="hljs-literal">false</span></span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throttle实例"><a href="#throttle实例" class="headerlink" title="throttle实例"></a>throttle实例</h2><p>这里同样使用上面的例子，看看有什么区别</p><ul><li>使用throttle，设置1秒只能触发一次</li></ul><p><img src="/blog/articles/2019-07-28-debounce/GIF-1564489890628.gif" alt="GIF"></p><p>如果还看不出区别，请看下图</p><ul><li>使用debounce ，设置延迟为1秒</li></ul><p><img src="/blog/articles/2019-07-28-debounce/GIF-1564489668561.gif" alt="GIF"></p><p>很明显了对吧</p><p><strong>不过throttle一般不用于这里，一般用于scroll，mousemove等触发频率很高的事件，对其进行限制</strong></p><h2 id="codepen-1"><a href="#codepen-1" class="headerlink" title="codepen"></a>codepen</h2><iframe height="265" style="width: 100%;" scrolling="no" title="throttle" src="//codepen.io/CYSILVER/embed/xvqQoL/?height=265&theme-id=0&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/CYSILVER/pen/xvqQoL/" target="_blank" rel="noopener">throttle</a> by Chen Yinyi  (<a href="https://codepen.io/CYSILVER" target="_blank" rel="noopener">@CYSILVER</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>以上就是对debounce和throttle的介绍，希望能帮助到大家</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;消抖(&lt;code&gt;debounce&lt;/code&gt;)&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当函数被调用后，n秒之后才会触发该函数，如果在此期间函数再次被调用，则重新开始计时，n秒之后才会触发该函数。   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其作用是为了避免某个事件在短时间内连续触发从而影响性能，也可用于避免在一定时间内重复提交表单等。   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;节流(&lt;code&gt;throttle&lt;/code&gt;):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数被调用后，立即触发该函数，在之后的n秒之内不能再次重复触发。   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该函数可以用于限制浏览器scroll，mousemove等高频触发事件的触发频率   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面介绍&lt;code&gt;debounce&lt;/code&gt;和&lt;code&gt;throttle&lt;/code&gt;的实现方式&lt;/strong&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6新特性之Map、Set与WeakMap、WeakSet的区别</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-26-WeakSet-WeakMap.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-26-WeakSet-WeakMap.html</id>
    <published>2019-07-26T13:57:07.000Z</published>
    <updated>2019-08-11T09:09:36.554Z</updated>
    
    <content type="html"><![CDATA[<p>ES6提供了新的数据结构Set，类似于数组，不过里面不会出现重复的值</p><p>另外一个是Map，类似于对象，对象只能使用字符串作为键，而Map可以使用任意类型</p><a id="more"></a><p>回顾下Map和Set</p><p><strong>简要总结如下：</strong></p><ul><li><p>Map</p><ul><li><p>与 Object 一样，本质上是Hash结构</p></li><li><p>可以使用各种类型作为key</p></li><li><p>Object 只能使用字符串作为key</p></li></ul></li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 使用数组作为key</span></span><br><span class="line"><span class="hljs-keyword">let</span> o = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="line"><span class="hljs-keyword">let</span> b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="line"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span><br><span class="line">map.set(o, <span class="hljs-string">'foo'</span>)</span><br><span class="line">map.set(b, <span class="hljs-string">'bar'</span>)</span><br><span class="line"><span class="hljs-comment">// 虽然使用了相同的数组，但数组的内存地址不一样，所以key不一样</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(o)) <span class="hljs-comment">// 'foo'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(map.get(b)) <span class="hljs-comment">// 'bar'</span></span><br><span class="line"><span class="hljs-comment">// 而使用对象就不能用上面的方法，对象的key只能使用字符串</span></span><br><span class="line"><span class="hljs-keyword">let</span> obj = &#123;</span><br><span class="line">    [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]: <span class="hljs-string">'foo'</span>  <span class="hljs-comment">//会报语法错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Set<ul><li>与数组类似</li><li>成员唯一，没有重复值</li></ul></li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">set</span> = new Set([1,1,1,2,3,4])</span><br><span class="line"></span><br><span class="line">for (let item of <span class="hljs-keyword">set</span>) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-comment">// 2</span></span><br><span class="line"><span class="hljs-comment">// 3</span></span><br><span class="line"><span class="hljs-comment">// 4</span></span><br><span class="line"><span class="hljs-comment">// 去掉了重复的1</span></span><br></pre></td></tr></table></figure><p><strong>WeakMap和WeakSet与Map和Set的主要区别就是：</strong></p><ul><li><p><code>WeakSet</code> 对象中只能存放对象引用，不能存放原始数据（如数字 1)</p></li><li><p><code>WeakSet</code> 对象中存储的对象值都是被弱引用的，如果没有其他的变量或属性引用这个对象值, 则这个对象值会被当成垃圾回收掉。</p></li><li><p><code>WeakMap</code> 中的key只是对象引用，不能是 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener">原始数据类型</a> </p></li><li><p><code>WeakMap</code> 持有的是每个键或值对象的弱引用，如果没有其他的变量或属性引用这个对象值, 则这个对象值会被当成垃圾回收掉。</p></li><li><p><code>WeakMap</code> 的key和 <code>WeakSet</code> 的元素是不可枚举的，因为他们存储的对象都是被弱引用的，如果能被枚举，会受垃圾回收机制的影响出现不确定性的结果</p></li></ul><p>举个例子</p><p><strong>如果使用的是<code>Map</code></strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span><br><span class="line">map.set(div, <span class="hljs-string">'foo'</span>)</span><br></pre></td></tr></table></figure><p>上面div是一个对象，map中以div为key，形成了对div对象的引用</p><p>如果我们不再需要这个对象，就必须手动解除引用，不然就不会对div的内存进行清理</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div = <span class="hljs-literal">null</span>  <span class="hljs-comment">// 不再需要这个对象</span></span><br><span class="line">map.delete(div) <span class="hljs-comment">// 手动解除map中的引用</span></span><br></pre></td></tr></table></figure><p><strong>而如果使用了<code>WeakMap</code></strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> weakmap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span><br><span class="line">weakmap.set(div, <span class="hljs-string">'foo'</span>)</span><br></pre></td></tr></table></figure><p>如果我们不再需要这个对象，由于WeakMap是弱引用，所以垃圾回收机制会清理掉div的内存</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div = <span class="hljs-literal">null</span>  <span class="hljs-comment">// 不再需要这个对象</span></span><br><span class="line"><span class="hljs-comment">// weakmap.delete(div) 不用手动解除</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6提供了新的数据结构Set，类似于数组，不过里面不会出现重复的值&lt;/p&gt;
&lt;p&gt;另外一个是Map，类似于对象，对象只能使用字符串作为键，而Map可以使用任意类型&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/categories/javascript/"/>
    
      <category term="es6" scheme="http://cyysilver.github.io/blog/categories/javascript/es6/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="es6" scheme="http://cyysilver.github.io/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门(4): loader的使用，css-loader</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-17-webpack-tutorial-04-use-cssloader.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-17-webpack-tutorial-04-use-cssloader.html</id>
    <published>2019-07-17T13:24:36.000Z</published>
    <updated>2019-08-11T09:09:36.543Z</updated>
    
    <content type="html"><![CDATA[<p>更新中</p><p><code>webpack</code> 的核心就是将资源文件打包，通过前面两章只对 <code>webpack</code> 进行初步的学习，也知道了如何对单个 <code>javascript</code> 文件进行打包，不过如果项目中包含<code>css</code>文件，也需要对其进行打包。</p><p><strong>当然css可以不用打包，但是命名空间会成为问题，很多css融在一起难免会造成命名冲突，所以才会有vue、react这些框架的组件化编程思想</strong></p><p>组件化的核心思想就是将<code>css、javascript、html</code>组合成一个单独的小部件，比如你做了一个相册，将代码分别写在<code>html、css、javacript</code>里面，当别人要用这个相册的时候就遇到问题了：</p><ol><li>需要复制你的<code>html</code>相册部分元素</li><li>需要复制你的<code>javascript</code></li><li>需要复制你的<code>css</code>样式表</li><li>在自己的工程中引入<code>css</code>和<code>js</code></li><li>祈祷<code>css、javascript</code>中没有冲突</li></ol><p><strong>好的做法</strong></p><p>将<code>css、html、javascript</code>融合到一个<code>javascript</code>文件作为一个模块，使用<code>javascript</code>生成<code>css、html</code>，然后别人只需要这样做：</p><p><em>假定这个<code>javascript</code>文件叫做<code>album.js</code></em></p><ol><li>引入<code>album.js</code>到<code>&lt;script&gt;&lt;/script&gt;</code>标签或者使用<strong>模块</strong>的方式引入到你的<code>javascript</code>里面</li><li>使用内部的方法，比如new album(selector)</li><li>然后就在对应的元素上创建了相册</li></ol><p>说了这么多，下面就来学习在webpack中如何使用<code>css-loader</code>对css进行打包</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装<code>style-loader</code>和<code>css-loader</code></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader </span><br><span class="line">npm install --save-dev css-loader</span><br></pre></td></tr></table></figure><h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p>为了做演示，这里写了一个简单的css文件</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">background</span>: darkblue;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>— 更新中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt; 的核心就是将资源文件打包，通过前面两章只对 &lt;code&gt;webpack&lt;/code&gt; 进行初步的学习，也知道了如何对单个 &lt;code&gt;javascript&lt;/code&gt; 文件进行打包，不过如果项目中包含&lt;code&gt;css&lt;/code&gt;文件，也需要对其进行打包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当然css可以不用打包，但是命名空间会成为问题，很多css融在一起难免会造成命名冲突，所以才会有vue、react这些框架的组件化编程思想&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;组件化的核心思想就是将&lt;code&gt;css、javascript、html&lt;/code&gt;组合成一个单独的小部件，比如你做了一个相册，将代码分别写在&lt;code&gt;html、css、javacript&lt;/code&gt;里面，当别人要用这个相册的时候就遇到问题了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要复制你的&lt;code&gt;html&lt;/code&gt;相册部分元素&lt;/li&gt;
&lt;li&gt;需要复制你的&lt;code&gt;javascript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要复制你的&lt;code&gt;css&lt;/code&gt;样式表&lt;/li&gt;
&lt;li&gt;在自己的工程中引入&lt;code&gt;css&lt;/code&gt;和&lt;code&gt;js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;祈祷&lt;code&gt;css、javascript&lt;/code&gt;中没有冲突&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;好的做法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;css、html、javascript&lt;/code&gt;融合到一个&lt;code&gt;javascript&lt;/code&gt;文件作为一个模块，使用&lt;code&gt;javascript&lt;/code&gt;生成&lt;code&gt;css、html&lt;/code&gt;，然后别人只需要这样做：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;假定这个&lt;code&gt;javascript&lt;/code&gt;文件叫做&lt;code&gt;album.js&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入&lt;code&gt;album.js&lt;/code&gt;到&lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;标签或者使用&lt;strong&gt;模块&lt;/strong&gt;的方式引入到你的&lt;code&gt;javascript&lt;/code&gt;里面&lt;/li&gt;
&lt;li&gt;使用内部的方法，比如new album(selector)&lt;/li&gt;
&lt;li&gt;然后就在对应的元素上创建了相册&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;说了这么多，下面就来学习在webpack中如何使用&lt;code&gt;css-loader&lt;/code&gt;对css进行打包&lt;/p&gt;
    
    </summary>
    
      <category term="webpack系列教程" scheme="http://cyysilver.github.io/blog/categories/webpack%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="webpack" scheme="http://cyysilver.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门(3): 使用配置文件webpack.config.js及多入口的配置</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-16-webpack-tutorial-03-config.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-16-webpack-tutorial-03-config.html</id>
    <published>2019-07-16T14:24:36.000Z</published>
    <updated>2019-08-11T09:09:36.543Z</updated>
    
    <content type="html"><![CDATA[<p>如果想修改webpack的默认入口，出口，使用的插件，loader时，可以通过控制台的webpack指令传入参数</p><p>如</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --entry xxxx</span><br></pre></td></tr></table></figure><p>来定义入口文件</p><p>但是更多的做法是创建一个webpack.config.js文件，利用这个文件对进行相关的配置</p><p>下面介绍使用webpack.config.js的基本配置以及多</p><a id="more"></a><h1 id="使用webpack-config-js"><a href="#使用webpack-config-js" class="headerlink" title="使用webpack.config.js"></a>使用webpack.config.js</h1><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><ul><li>可以手动新建文件，</li><li>也可以使用npx webpack init指令初始化配置文件</li></ul><p><strong>使用npx webpack init命令</strong></p><p>在输入指令后根据提示创建配置文件</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npx webpack init</span><br><span class="line"></span><br><span class="line">i INFO  For more information and a detailed description of each question, have a look at: https://github.com/webpack/webpack-cli/blob/master/INIT.md</span><br><span class="line">i INFO  Alternatively, run <span class="hljs-string">"webpack(-cli) --help"</span> <span class="hljs-keyword">for</span> usage info</span><br><span class="line"></span><br><span class="line">? Will your application have multiple bundles? No</span><br><span class="line">? Which will be your application entry point? src/index</span><br><span class="line">? In <span class="hljs-built_in">which</span> folder <span class="hljs-keyword">do</span> you want to store your generated bundles? dist</span><br><span class="line">? Will you use one of the below JS solutions? ES6</span><br><span class="line">? Will you use one of the below CSS solutions? CSS</span><br><span class="line">? Overwrite src\index.js? overwrite</span><br></pre></td></tr></table></figure><p><strong>手动创建webpack.config.js</strong></p><p>在项目根目录创建webpack.config.js</p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-03-config/1564065479810.png" alt="1564065479810"></p><p>编辑文件</p><p><strong>webpack.config.js</strong></p><p>使用module.exports暴露模块</p><ul><li><p>entry 定义入口文件</p></li><li><p>output 定义输出文件</p></li><li><p>plugins 使用的插件</p></li><li><p>module 使用的loader</p></li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-comment">// 使用开发者模式</span></span><br><span class="line">  mode: <span class="hljs-string">'development'</span>,</span><br><span class="line">  <span class="hljs-comment">// 定义入口</span></span><br><span class="line">  entry: <span class="hljs-string">'./src/index.js'</span>,</span><br><span class="line">    </span><br><span class="line">  <span class="hljs-comment">// 定义输出文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="hljs-string">'main.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  // 定义插件</span></span><br><span class="line"><span class="hljs-comment">  plugins: [new webpack.ProgressPlugin(), new HtmlWebpackPlugin()],</span></span><br><span class="line"><span class="hljs-comment">  // 定义loader</span></span><br><span class="line"><span class="hljs-comment">  module: &#123;</span></span><br><span class="line"><span class="hljs-comment">    rules: [</span></span><br><span class="line"><span class="hljs-comment">      &#123;</span></span><br><span class="line"><span class="hljs-comment">        test: /\.css$/i,</span></span><br><span class="line"><span class="hljs-comment">        use: ['style-loader', 'css-loader'],</span></span><br><span class="line"><span class="hljs-comment">      &#125;,</span></span><br><span class="line"><span class="hljs-comment">    ],</span></span><br><span class="line"><span class="hljs-comment">  &#125;,</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置好之后运行npx webpack</p><p><strong>输出</strong></p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-03-config/1564066523460.png" alt="1564066523460"></p><h1 id="配置多个入口"><a href="#配置多个入口" class="headerlink" title="配置多个入口"></a>配置多个入口</h1><p><strong>入口</strong></p><p>这里使用3个js文件</p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-03-config/1564067016774.png" alt="1564067016774"></p><p><strong>webpack.config.js</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="hljs-comment">// 使用对象语法定义3个入口文件</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    pageOne: <span class="hljs-string">'./src/index1.js'</span>,</span><br><span class="line">    pageTwo: <span class="hljs-string">'./src/index2.js'</span>,</span><br><span class="line">    pageThree: <span class="hljs-string">'./src/index3.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-comment">// 分别输出3个js文件，[name]表示对应的文件名</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="hljs-string">'[name].js'</span>,</span><br><span class="line">    path: __dirname + <span class="hljs-string">'/dist'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行<code>npx webpack</code></p><p><strong>输出</strong></p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-03-config/1564067057602.png" alt="1564067057602"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果想修改webpack的默认入口，出口，使用的插件，loader时，可以通过控制台的webpack指令传入参数&lt;/p&gt;
&lt;p&gt;如&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;webpack --entry xxxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;来定义入口文件&lt;/p&gt;
&lt;p&gt;但是更多的做法是创建一个webpack.config.js文件，利用这个文件对进行相关的配置&lt;/p&gt;
&lt;p&gt;下面介绍使用webpack.config.js的基本配置以及多&lt;/p&gt;
    
    </summary>
    
      <category term="webpack系列教程" scheme="http://cyysilver.github.io/blog/categories/webpack%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="webpack" scheme="http://cyysilver.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门(2): 安装与使用</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-16-webpack-tutorial-02-getting-start.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-16-webpack-tutorial-02-getting-start.html</id>
    <published>2019-07-16T14:00:36.000Z</published>
    <updated>2019-08-11T09:09:36.543Z</updated>
    
    <content type="html"><![CDATA[<p>下面就来通过例子讲解webpack的安装，基本操作</p><p>webpack 是一个用于编译Javascript模块的工具，在安装webpack之后，可以通过</p><ul><li>CLI (command line interface 就是在控制台上使用 )  </li><li>API (在js中导入模块使用)</li></ul><p>下面介绍的是webpack-cli的使用</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>输入下面指令，意思是</p><p>创建webpack-demo文件夹</p><p>进入webpack-demo</p><p>初始化<code>npm  -y</code>参数表示自动输入yes</p><p>安装webpack</p><p>安装webpack-cli</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-demo</span><br><span class="line"><span class="hljs-built_in">cd</span> webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack --save-dev</span><br><span class="line">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>执行完之后会生成一个package.json，这是npm生成的文件，定义了这个项目所需要的各种模块,以及项目的配置信息。关于npm和package.json这里不做过多阐述</p><blockquote><p> <em>如果你想要了解</em> <code>package.json</code> <em>内在机制的更多信息，推荐阅读</em> <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">npm 文档</a><em>。</em></p></blockquote><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><p>创建以下目录结构</p><figure class="highlight diff hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line"><span class="hljs-addition">+ |- index.html</span></span><br><span class="line"><span class="hljs-addition">+ |- /src</span></span><br><span class="line"><span class="hljs-addition">+   |- index.js</span></span><br></pre></td></tr></table></figure><p>各个文件的内容如下<br>./src/index.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">component</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的</span></span><br><span class="line">  element.innerHTML = _.join([<span class="hljs-string">'Hello'</span>, <span class="hljs-string">'webpack'</span>], <span class="hljs-string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>./index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Getting Started<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/lodash@4.16.6"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./src/index.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>./package.json</p><figure class="highlight diff hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "name": "webpack-demo",</span><br><span class="line">    "version": "1.0.0",</span><br><span class="line">    "description": "",</span><br><span class="line"><span class="hljs-addition">+   "private": true, </span></span><br><span class="line"><span class="hljs-deletion">-   "main": "index.js",</span></span><br><span class="line">    "scripts": &#123;</span><br><span class="line">      "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">    &#125;,</span><br><span class="line">    "keywords": [],</span><br><span class="line">    "author": "",</span><br><span class="line">    "license": "ISC",</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "webpack": "^4.20.2",</span><br><span class="line">      "webpack-cli": "^3.1.2"</span><br><span class="line">    &#125;,</span><br><span class="line">    "dependencies": &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>private的作用是<strong>防止项目被发布</strong></p><p>在开始使用webpack前，观察目录结构，默认情况下webpack的入口是src/index.js，index.js的执行需要依赖<code>lodash</code></p><p>这在index.html体现出来，</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://unpkg.com/lodash@4.16.6"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在index.js引入之前引入了lodash</p><p>但index.js未显式声明引入lodash，这时webpack会假定存在全局变量 <code>_</code> </p><blockquote><p>lodash这个库的使用方式就是用 <code>_</code>操作，与jquery的<code>$</code>类似</p></blockquote><p>不过这样做会有一些问题</p><ul><li>无法立即体现，脚本的执行依赖于外部扩展库(external library)。</li><li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li><li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li></ul><p>这时候执行</p><p><strong>这句话意思是，执行安装在node_module的webpack控制台程序</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>生成的文件中不会有lodash的变量<code>_</code>，将会报错</p><p>下面src/index.js通过webpack打包后生成的文件，默认在dist目录下</p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-02-getting-start/1563289612108.png" alt="1563289612108"></p><ul><li>这里只有<code>main.js</code></li><li>通过查看里面也没有<code>lodash</code>的脚本</li><li><code>index.htm</code>l也不存在</li></ul><p>显然我们这不是我们预期的输出</p><h1 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h1><p>这里需要手动将index.html移入dist文件夹</p><p>更改<code>script</code>标签</p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-02-getting-start/1563289812766.png" alt="1563289812766"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;起步&lt;<span class="hljs-regexp">/title&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script src=<span class="hljs-string">"main.js"</span>&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="hljs-regexp">/body&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>这里删除了两个script标签，引入了main.js</p><figure class="highlight diff hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!doctype html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">     &lt;title&gt;Getting Started&lt;/title&gt;</span><br><span class="line"><span class="hljs-deletion">-    &lt;script src="https://unpkg.com/lodash@4.16.6"&gt;&lt;/script&gt;</span></span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"><span class="hljs-deletion">-    &lt;script src="./src/index.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="hljs-addition">+    &lt;script src="main.js"&gt;&lt;/script&gt;</span></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>不过这里的main.js仍然没有引入lodash</p><p>这时候执行</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p><strong>访问index.html查看控制台</strong></p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-02-getting-start/1563290764739.png" alt="1563290764739"></p><p>可以看出 <code>_</code>没有被定义</p><h1 id="通过npm安装lodash并通过import引入"><a href="#通过npm安装lodash并通过import引入" class="headerlink" title="通过npm安装lodash并通过import引入"></a>通过npm安装lodash并通过import引入</h1><p>通过npm 安装lodash</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save lodash</span><br></pre></td></tr></table></figure><p>引入到index.js</p><p>只是在第一行增加了<code>import _ from &#39;lodash&#39;;</code></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">component</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> element = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// Lodash 通过import引入</span></span><br><span class="line">    element.innerHTML = _.join([<span class="hljs-string">'Hello'</span>, <span class="hljs-string">'webpack'</span>], <span class="hljs-string">' '</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-keyword">return</span> element;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>现在，可以打包我们的程序了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>执行安装在node_module的webpack控制台程序</p><p><strong>查看页面</strong></p><p><img src="/blog/articles/2019-07-16-webpack-tutorial-02-getting-start/1563290852753.png" alt="1563290852753"></p><p>这说明代码已经执行，现在已经没问题了</p><h1 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h1><p>这时我们已经基本了解webpack的工作流程，不过大多数情况下，都要通过<code>webpack.config.js</code>配置文件来控制webpack文件的入口，出口，需要用到的loader、插件</p><p>该内容将在<a href="/blog/articles/2019-07-17-webpack-tutorial-03-config.html">下一章</a>进行讲解</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面就来通过例子讲解webpack的安装，基本操作&lt;/p&gt;
&lt;p&gt;webpack 是一个用于编译Javascript模块的工具，在安装webpack之后，可以通过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI (command line interface 就是在控制台上使用 )  &lt;/li&gt;
&lt;li&gt;API (在js中导入模块使用)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面介绍的是webpack-cli的使用&lt;/p&gt;
    
    </summary>
    
      <category term="webpack系列教程" scheme="http://cyysilver.github.io/blog/categories/webpack%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="webpack" scheme="http://cyysilver.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门(1): 核心概念</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-16-webpack-tutorial-01.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-16-webpack-tutorial-01.html</id>
    <published>2019-07-16T13:24:36.000Z</published>
    <updated>2019-08-11T09:09:36.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>webpack 是一个用于编译Javascript模块的工具，在安装webpack之后，可以通过</p><ul><li>CLI (command line interface 就是在控制台上使用 )  </li><li>API (在js中导入模块使用)</li></ul><p>在使用webpack之前，如果你还是一个新手，请阅读下面的核心概念之后，再进行操作</p><p>如果你想直接进入操作来学习，请进入 <a href="/blog/articles/2019-07-16-webpack-tutorial-02-getting-start.html">webpack入门之安装与使用</a></p><a id="more"></a><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>webpack 本质上就是个 <em>静态模块打包器(module bundler)</em>。webpack处理程序时会创建依赖关系图，把你应用程序中用到的文件打包成一个或者多个文件</p><blockquote><p>*<a href="https://www.webpackjs.com/concepts/modules" target="_blank" rel="noopener">这里</a>可以了解更多关于 JavaScript 模块和 webpack 模块的信息*</p></blockquote><p><img src="/blog/articles/2019-07-16-webpack-tutorial-01/1563284508439.png" alt="1563284508439"></p><p>从4.0.0版本之后，<strong>使用webpack不需要再创建一个配置文件</strong></p><p>以下介绍几个<strong>核心概念</strong></p><ul><li><a href="#entry">Entry (入口)</a></li><li><a href="#output">Output (出口)</a></li><li><a href="#loaders">Loaders</a></li><li><a href="#plugins">Plugins (插件)</a></li><li><a href="#mode">Mode</a></li><li><a href="#compatibility">Browser Compatibility (浏览器兼容性)</a></li></ul><p><span id="entry"></span></p><h2 id="Entry-入口"><a href="#Entry-入口" class="headerlink" title="Entry 入口"></a>Entry 入口</h2><p>入口表示你的webpack打包开始的文件，它会寻找该文件依赖的其他文件，将他们合并打包。</p><p>可以通过webpack config中的entry属性，来定义一个（或者多个起点）</p><p>默认值为<code>./src/index.js</code></p><p><strong>webpack.config.js</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="hljs-string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><span id="output"></span></p><h2 id="Output-出口"><a href="#Output-出口" class="headerlink" title="Output 出口"></a>Output 出口</h2><p>即打包后完成文件输出的目录</p><p>默认输出js为<code>./dist/main.js</code></p><p>其他文件在<code>./dist</code></p><p><strong>webpack.config.js</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="hljs-string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="hljs-comment">/* 指定输出目录 */</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">'dist'</span>),</span><br><span class="line">    <span class="hljs-comment">/* 指定输出文件名 */</span></span><br><span class="line">    filename: <span class="hljs-string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用<code>output.filename</code>和<code>output.path</code>来指定文件名和路径</p><p>顶部引入的<code>const path = require(&#39;path&#39;)</code>是Node.js用于操作文件路径的模块</p><p><span id="loaders"></span></p><h2 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h2><p>webpack本身只能处理Javascript，使用loader可以让webpack让其他类型文件转换为webpack能够处理的模块</p><blockquote><p><em>loader 能够<code>import</code> 导入任何类型的模块（例如<code>.css</code> 文件），这是 webpack 特有的功能</em></p></blockquote><p>loader在webpack中配置如下</p><p><strong>webpack.config.js</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> config = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="hljs-string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="hljs-comment">/* test 正则表达式，用于匹配进行转换的文件 */</span></span><br><span class="line">      <span class="hljs-comment">/* use 表示所使用的loader名称 */</span></span><br><span class="line">      &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/</span>, <span class="hljs-attr">use</span>: <span class="hljs-string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>以上代码中添加了<code>module</code>，在内部定义了<code>rules</code>，里面必须包含</p><ol><li><code>test</code> 属性，(正则表达式) 用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li><li><code>use</code> 属性，使用的loader名称</li></ol><p>它们的作用是告诉webpack编译器，在解析时发现 import xxxx.txt / require(xxx.txt) 里面有.txt的路径时，使用<code>raw-loader</code>进行转换</p><p><span id="plugins"></span></p><h2 id="Plugins-插件"><a href="#Plugins-插件" class="headerlink" title="Plugins 插件"></a>Plugins 插件</h2><p>插件与Loader不同的是，插件可用于执行范围更广的任务，具体是什么个东西在使用webpack之后就会渐渐了解</p><p>Plugins的配置如下</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>); <span class="hljs-comment">// 通过 npm 安装</span></span><br><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>); <span class="hljs-comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> config = &#123;</span><br><span class="line">  <span class="hljs-built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/</span>, <span class="hljs-attr">use</span>: <span class="hljs-string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="hljs-comment">/* 实例化一个对象 */</span></span><br><span class="line">    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<span class="hljs-attr">template</span>: <span class="hljs-string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>这里使用了一个叫做<code>html-webpack-plugin</code>的插件</p><p>首先在config里添加</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> config = &#123;</span><br><span class="line">  <span class="hljs-comment">/* ... */</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="hljs-comment">/* ... */</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后导入HtmlWebpackPlugin插件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);</span><br></pre></td></tr></table></figure><p>在config里new 一个实例</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> config = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<span class="hljs-attr">template</span>: <span class="hljs-string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><span id="mode"></span></p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>webpack有两种模式</p><ul><li><code>development</code></li><li><code>production</code></li></ul><p>及开发模式和生产模式<br><a href="https://www.webpackjs.com/concepts/mode/" target="_blank" rel="noopener">了解更多</a></p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>webpack 支持所有支持ES5的浏览器(IE8 及以下不支持)<br>如果你想支持旧版浏览器，你需要加载<a href="https://www.webpackjs.com/guides/shimming/" target="_blank" rel="noopener">polyfill</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;webpack 是一个用于编译Javascript模块的工具，在安装webpack之后，可以通过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI (command line interface 就是在控制台上使用 )  &lt;/li&gt;
&lt;li&gt;API (在js中导入模块使用)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用webpack之前，如果你还是一个新手，请阅读下面的核心概念之后，再进行操作&lt;/p&gt;
&lt;p&gt;如果你想直接进入操作来学习，请进入 &lt;a href=&quot;/blog/articles/2019-07-16-webpack-tutorial-02-getting-start.html&quot;&gt;webpack入门之安装与使用&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="webpack系列教程" scheme="http://cyysilver.github.io/blog/categories/webpack%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="webpack" scheme="http://cyysilver.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>使用gulp优化hexo博客，对资源进行压缩</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-05-hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-gulp%E5%8E%8B%E7%BC%A9-%E6%8F%90%E9%AB%98%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-05-hexo博客优化-gulp压缩-提高访问速度.html</id>
    <published>2019-07-05T11:00:00.000Z</published>
    <updated>2019-08-11T09:09:36.542Z</updated>
    
    <content type="html"><![CDATA[<p>hexo生成出来的资源文件很大，全是没有压缩的，为了节约网络带宽，可以对其public目录下的js，html，css文件进行压缩。那么这里使用的工具就是强大的gulp</p><a id="more"></a><h1 id="使用gulp对打包出的css、js、html及图片文件进行压缩"><a href="#使用gulp对打包出的css、js、html及图片文件进行压缩" class="headerlink" title="使用gulp对打包出的css、js、html及图片文件进行压缩"></a>使用gulp对打包出的css、js、html及图片文件进行压缩</h1><hr><p>使用hexo generate指令后，会在根目录下生成网页的资源文件<br>其目录结构如下  </p><p><img src="/blog/articles/2019-07-05-hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-gulp%E5%8E%8B%E7%BC%A9-%E6%8F%90%E9%AB%98%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/Snipaste_2019-07-06_23-14-23.png" alt="Snipaste_2019-07-06_23-14-23"></p><p>查看里面的内容，会发现有大量的空白</p><p><img src="/blog/articles/2019-07-05-hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-gulp%E5%8E%8B%E7%BC%A9-%E6%8F%90%E9%AB%98%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/noncompresstext.png" alt="noncompresstext"></p><p>查看文件的大小:50kb</p><p><img src="/blog/articles/2019-07-05-hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-gulp%E5%8E%8B%E7%BC%A9-%E6%8F%90%E9%AB%98%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/noncompress.png" alt="noncompress"></p><p>然后我们再来看看压缩后的文件大小:33kb</p><p><img src="/blog/articles/2019-07-05-hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-gulp%E5%8E%8B%E7%BC%A9-%E6%8F%90%E9%AB%98%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/compressedfile.png" alt="compressedfile"></p><p>内容</p><p><img src="/blog/articles/2019-07-05-hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-gulp%E5%8E%8B%E7%BC%A9-%E6%8F%90%E9%AB%98%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/compressed.png" alt="compressed"></p><p>这些多余的空白造成了文件内容冗余，造成了空间浪费，压缩后的文件都快比原来少一半了。</p><hr><h1 id="gulp介绍"><a href="#gulp介绍" class="headerlink" title="gulp介绍"></a>gulp介绍</h1><p>什么是gulp？   </p><p>官网介绍:<br><code>Gulp.js 是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的，利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。</code></p><p><strong>想要了解更多可以查看<br><a href="https://www.gulpjs.com.cn/" title="gulp官网" target="_blank" rel="noopener">gulp官网</a></strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>没有安装npm的需安装npm</p></li><li><p>安装gulp工具</p><ul><li>全局安装<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    npm install --global gulp</span><br></pre></td></tr></table></figure></li></ul></li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>- 作为依赖本地安装<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></code></pre><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol start="3"><li><p>在项目根目录下创建gulpfile.js的文件夹</p><p> 输入以下代码</p> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="hljs-string">'default'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-comment">// 要执行的任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 然后在命令行输入</p><blockquote><p>gulp </p></blockquote><p> 就会运行task里面的任务</p><hr><p> 如果任务名字不是default，如</p> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="hljs-string">'hello'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'你好'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 这时需要在命令行输入</p><blockquote><p>gulp hello</p></blockquote><p> 输出</p> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[00:53:12] Using gulpfile D:\SILVER\Documents\GitHub\MyHexoBlog\gulpfile.js</span><br><span class="line">[00:53:12] Starting &apos;hello&apos;...</span><br><span class="line">你好</span><br></pre></td></tr></table></figure></li></ol><p>简短介绍后，下面进入正题</p><h1 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h1><p>gulp是通过插件来运作的</p><p>首先需要安装插件</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean // 压缩html</span><br><span class="line">npm install gulp-htmlmin // 压缩html，外加去除注释，压缩css，删除多余属性等</span><br><span class="line">npm install gulp-clean-css // 压缩css</span><br><span class="line">npm install gulp-uglify // 压缩js</span><br><span class="line">npm install gulp-babel // 转换为es2015</span><br><span class="line">npm install gulp-imagemin // 压缩图片</span><br></pre></td></tr></table></figure><p>编写<br>gulpfile.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> cleanCSS = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-clean-css'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-htmlmin'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-htmlclean'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-babel'</span>) <span class="hljs-comment">/* 转换为es2015 */</span></span><br><span class="line"><span class="hljs-keyword">let</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-uglify'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-imagemin'</span>)</span><br><span class="line"><span class="hljs-comment">// 压缩html</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 设置根目录</span></span><br><span class="line"><span class="hljs-keyword">const</span> root = <span class="hljs-string">'./public'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 匹配模式， **/*代表匹配所有目录下的所有文件</span></span><br><span class="line"><span class="hljs-keyword">const</span> pattern = <span class="hljs-string">'**/*'</span></span><br><span class="line">gulp.task(<span class="hljs-string">'minify-html'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> gulp</span><br><span class="line">    <span class="hljs-comment">// 匹配所有 .html结尾的文件</span></span><br><span class="line">    .src(<span class="hljs-string">`<span class="hljs-subst">$&#123;root&#125;</span>/<span class="hljs-subst">$&#123;pattern&#125;</span>.html`</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="hljs-literal">true</span>,</span><br><span class="line">        minifyJS: <span class="hljs-literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="hljs-literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="hljs-literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="hljs-string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="hljs-string">'minify-css'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> gulp</span><br><span class="line">    <span class="hljs-comment">// 匹配所有 .css结尾的文件</span></span><br><span class="line">    .src(<span class="hljs-string">`<span class="hljs-subst">$&#123;root&#125;</span>/<span class="hljs-subst">$&#123;pattern&#125;</span>.css`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      cleanCSS(&#123;</span><br><span class="line">        compatibility: <span class="hljs-string">'ie8'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="hljs-string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="hljs-string">'minify-js'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> gulp</span><br><span class="line">    <span class="hljs-comment">// 匹配所有 .js结尾的文件</span></span><br><span class="line">    .src(<span class="hljs-string">`<span class="hljs-subst">$&#123;root&#125;</span>/<span class="hljs-subst">$&#123;pattern&#125;</span>.js`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      babel(&#123;</span><br><span class="line">        presets: [<span class="hljs-string">'env'</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="hljs-string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="hljs-string">'minify-images'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> gulp</span><br><span class="line">    <span class="hljs-comment">// 匹配public/images目录下的所有文件</span></span><br><span class="line">    .src(<span class="hljs-string">`<span class="hljs-subst">$&#123;root&#125;</span>/images/<span class="hljs-subst">$&#123;pattern&#125;</span>`</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      imagemin(</span><br><span class="line">        [</span><br><span class="line">          imagemin.gifsicle(&#123; <span class="hljs-attr">optimizationLevel</span>: <span class="hljs-number">3</span> &#125;),</span><br><span class="line">          imagemin.jpegtran(&#123; <span class="hljs-attr">progressive</span>: <span class="hljs-literal">true</span> &#125;),</span><br><span class="line">          imagemin.optipng(&#123; <span class="hljs-attr">optimizationLevel</span>: <span class="hljs-number">7</span> &#125;),</span><br><span class="line">          imagemin.svgo()</span><br><span class="line">        ],</span><br><span class="line">        &#123; <span class="hljs-attr">verbose</span>: <span class="hljs-literal">true</span> &#125;</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="hljs-string">'./public/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 如果使用的是gulp 4.0版本以下，使用下面的代码</span></span><br><span class="line"><span class="hljs-comment">// gulp.task('default', [</span></span><br><span class="line"><span class="hljs-comment">//     'minify-html','minify-css','minify-js'</span></span><br><span class="line"><span class="hljs-comment">// ]);</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="hljs-string">'default'</span>, gulp.series(<span class="hljs-string">'minify-html'</span>, <span class="hljs-string">'minify-css'</span>, <span class="hljs-string">'minify-js'</span>))</span><br></pre></td></tr></table></figure><p><strong>注意这里使用了gulp 4.0以上的版本</strong></p><p><strong>使用下面代码定义指令gulp的任务队列</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 顺序执行 minify-html -&gt; minify-css -&gt; minify-js</span></span><br><span class="line">gulp.task(<span class="hljs-string">'default'</span>, gulp.series(<span class="hljs-string">'minify-html'</span>, <span class="hljs-string">'minify-css'</span>, <span class="hljs-string">'minify-js'</span>))</span><br></pre></td></tr></table></figure><p>然后在命令行输入</p><blockquote><p>gulp<br>就可以开始压缩了</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br><span class="line">[01:09:51] Using gulpfile D:\SILVER\Documents\GitHub\MyHexoBlog\gulpfile.js</span><br><span class="line">[01:09:51] Starting &apos;default&apos;...</span><br><span class="line">[01:09:51] Starting &apos;minify-html&apos;...</span><br><span class="line">[01:09:52] Finished &apos;minify-html&apos; after 924 ms</span><br><span class="line">[01:09:52] Starting &apos;minify-css&apos;...</span><br><span class="line">[01:09:52] Finished &apos;minify-css&apos; after 65 ms</span><br><span class="line">[01:09:52] Starting &apos;minify-js&apos;...</span><br><span class="line">[01:09:53] Finished &apos;minify-js&apos; after 1.16 s</span><br><span class="line">[01:09:53] Finished &apos;default&apos; after 2.16 s</span><br></pre></td></tr></table></figure><p>压缩完成后使用hexo部署</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><hr><h2 id="一个命令搞定生成文件，压缩，部署"><a href="#一个命令搞定生成文件，压缩，部署" class="headerlink" title="一个命令搞定生成文件，压缩，部署"></a>一个命令搞定生成文件，压缩，部署</h2><p>在package.json文件中的”scripts”下添加</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "deploy": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在控制台输入</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>就会开始自动生成文件-&gt;压缩文件-&gt;部署到服务器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo生成出来的资源文件很大，全是没有压缩的，为了节约网络带宽，可以对其public目录下的js，html，css文件进行压缩。那么这里使用的工具就是强大的gulp&lt;/p&gt;
    
    </summary>
    
      <category term="gulp" scheme="http://cyysilver.github.io/blog/categories/gulp/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="html" scheme="http://cyysilver.github.io/blog/tags/html/"/>
    
      <category term="css" scheme="http://cyysilver.github.io/blog/tags/css/"/>
    
      <category term="gulp" scheme="http://cyysilver.github.io/blog/tags/gulp/"/>
    
      <category term="博客优化" scheme="http://cyysilver.github.io/blog/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>VscodeVim 遇到的奇葩bug</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-05-VscodeVim-bug.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-05-VscodeVim-bug.html</id>
    <published>2019-07-04T18:20:00.000Z</published>
    <updated>2019-08-11T09:09:36.543Z</updated>
    
    <content type="html"><![CDATA[<p>bug已经提交至github<br><a href="https://github.com/VSCodeVim/Vim/issues/3864" target="_blank" rel="noopener">https://github.com/VSCodeVim/Vim/issues/3864</a><br>当使用插件VscodeVim和auto rename tag，新建文件<br>在第一行输入：   </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(get_config(&apos;toc&apos;) === true &amp;&amp; (post.layout === &apos;page&apos; || post.layout === &apos;post&apos; )) &#123;</span><br></pre></td></tr></table></figure><p>输入到第三个 ‘===’ 的时候编辑器就会开始卡，输入一个字符很卡，但是能正常进行其他操作<br>太奇葩了<br>关掉其中任意一个插件都能够正常运行   </p><a id="more"></a><p><strong>Bub 描述</strong></p><ul><li>操作系统: Windows 10 1903</li><li>Vscode 插件: VscodeVim, Auto Rename Tag</li><li>Vscode 版本: 1.36.0</li></ul><p>问题:</p><ul><li><p>在文件中输入以下的代码会卡住键盘不能输入，但是仍然能够使用方向键移动光标</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(get_config(&apos;toc&apos;) === true &amp;&amp; (post.layout === &apos;page&apos; || post.layout === &apos;post&apos; )) &#123;</span><br></pre></td></tr></table></figure></li><li><p>在输入第三个 “===” 会产生卡顿</p></li><li><p>卡顿后仍然能够移动光标</p></li><li><p><strong>只有在安装过vim和auto rename tag 插件后才会有冲突</strong></p><p> Actually I’m really confused how it would work, Are my PC broken…<br> 说实话我真不知道这玩意的原理是什么，开始我怀疑我系统问题，后来找了几个朋友测试都这样。真实个奇葩的问题</p></li></ul><p><strong>重现bug</strong><br>Steps to reproduce the behavior:<br>步骤</p><ol><li><p>打开Vscodej</p></li><li><p>按Ctrl+Shift+P 打开command line</p></li><li><p>输入ext: disable all</p></li><li><p>选择</p><blockquote><p>Extensions: Disable All Installed Extensions</p></blockquote></li><li><p>点击左侧插件</p></li><li><p>安装 vim 和 auto rename  tag 插件 (<strong>两个都得启用</strong>)</p></li><li><p>创建新文件命名为 “test” (命名随便)</p></li><li><p>打开文件, 按<strong>i</strong>进入vim插入模式</p></li><li><p>输入以下的代码 *<em>(! 注意不能忽视空格 ) *</em><br><code>&lt;% if(get_config(&#39;toc&#39;) === true &amp;&amp; (post.layout === &#39;page&#39; || post.layout === &#39;post&#39; )) {</code></p></li></ol><p><strong>Expected behavior</strong><br>当输入到第三个 “===” 的时候就会开始卡顿</p><ul><li>会明显感受到输入延迟, 有种打不动字的感觉</li><li>当完成输入后, 按backspace退格也会产生相同的感觉</li><li>卡顿时可能无法输入任何文字, 但能够使用方向键移动</li></ul><p><strong>Screenshots</strong><br><img src="https://user-images.githubusercontent.com/48582184/60663104-d951b280-9e90-11e9-97a7-fbe6c6f18849.png" alt="bugs"></p><p><strong>运行环境</strong></p><ul><li>Running Extensions<ul><li>Node Debug Auto-attach</li><li>Emmet</li><li>Git</li><li>Merge Conflict</li><li>Auto Rename Tag 0.1.0</li><li>Vim</li></ul></li><li>Extension (VsCodeVim) version: 1.8.1</li><li>VSCode version:  1.36.0</li><li>OS: Windows 10 1903</li></ul><h1 id="提交原文"><a href="#提交原文" class="headerlink" title="提交原文"></a>提交原文</h1><p><strong>Describe the bug</strong></p><ul><li>System: Windows 10 1903</li><li>Vscode Plugins: VscodeVim, Auto Rename Tag</li><li>Vscode Version: 1.36.0</li></ul><p>bug:</p><ul><li><p>type the following code in a line will likely <strong>freeze</strong> your keyboard but you still can move caret with arrow key.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(get_config(&apos;toc&apos;) === true &amp;&amp; (post.layout === &apos;page&apos; || post.layout === &apos;post&apos; )) &#123;</span><br></pre></td></tr></table></figure></li><li><p>You will get stuttering when you type to the third “===”</p></li><li><p>You can still move your caret when you get stuttering</p></li><li><p><strong>You can only produce the behavior when you installed both vim and auto rename tag extensions</strong></p><p> Actually I’m really confused how it would work, Are my PC broken…</p></li></ul><p><strong>To Reproduce</strong><br>Steps to reproduce the behavior:</p><ol><li><p>Open Vscode</p></li><li><p>Press Ctrl+Shift+P open command line</p></li><li><p>Type ext: disable all</p></li><li><p>Select </p><blockquote><p>Extensions: Disable All Installed Extensions</p></blockquote></li><li><p>Go to Extensions</p></li><li><p>Install vim and auto rename tag (<strong>both should be enabled</strong>)</p></li><li><p>Create a new file named “test” </p></li><li><p>In the file, press <strong>i</strong> enter the vim insert mode </p></li><li><p>Type the following code <strong>(! Can not ignore spaces)</strong><br><code>&lt;% if(get_config(&#39;toc&#39;) === true &amp;&amp; (post.layout === &#39;page&#39; || post.layout === &#39;post&#39; )) {</code></p></li></ol><p><strong>Expected behavior</strong><br>When reach the third “===” stuttering would occur</p><ul><li>you can continue type but it feel lag and stutter</li><li>when you finished and press backspace produce the same behavior</li><li>you may can’t type any word but you can still move your caret with arrow key</li></ul><p><strong>Screenshots</strong><br><img src="https://user-images.githubusercontent.com/48582184/60663104-d951b280-9e90-11e9-97a7-fbe6c6f18849.png" alt="bugs"></p><p><strong>Environment</strong></p><ul><li>Running Extensions<ul><li>Node Debug Auto-attach</li><li>Emmet</li><li>Git</li><li>Merge Conflict</li><li>Auto Rename Tag 0.1.0</li><li>Vim</li></ul></li><li>Extension (VsCodeVim) version: 1.8.1</li><li>VSCode version:  1.36.0</li><li>OS: Windows 10 1903</li></ul>]]></content>
    
    <summary type="html">
    
      vscodevim与auto rename tag结合产生的bug
    
    </summary>
    
      <category term="github" scheme="http://cyysilver.github.io/blog/categories/github/"/>
    
    
      <category term="bug" scheme="http://cyysilver.github.io/blog/tags/bug/"/>
    
      <category term="vim" scheme="http://cyysilver.github.io/blog/tags/vim/"/>
    
      <category term="vscode" scheme="http://cyysilver.github.io/blog/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Html+css+js布局设计第一弹</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-03-html-css%E5%B0%8F%E6%8A%80%E5%B7%A7%E7%AC%AC%E4%B8%80%E5%BC%B9.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-03-html-css小技巧第一弹.html</id>
    <published>2019-07-03T05:21:46.000Z</published>
    <updated>2019-08-11T09:09:36.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-Horizontal-Menu"><a href="#8-Horizontal-Menu" class="headerlink" title="8 Horizontal Menu"></a>8 Horizontal Menu</h1><h2 id="2019-6-23"><a href="#2019-6-23" class="headerlink" title="2019/6/23"></a>2019/6/23</h2><h3 id="水平菜单栏"><a href="#水平菜单栏" class="headerlink" title="水平菜单栏"></a>水平菜单栏</h3><p>有一些简单的动画，在别的地方看见的，就照着做了下</p><a id="more"></a><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 主要也是用的 :before 伪元素来修饰图标 */</span></span><br><span class="line"><span class="hljs-selector-tag">nav</span> <span class="hljs-selector-class">.menu</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">border-color</span>: transparent;</span><br><span class="line">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">66px</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">66px</span>;</span><br><span class="line">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>, font-size <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>,</span><br><span class="line">    border-color <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>, height <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>,</span><br><span class="line">    width <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>, line-height <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">nav</span> <span class="hljs-selector-class">.menu</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid;</span><br><span class="line">  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#a3a7ad</span>;</span><br><span class="line">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">41px</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">41px</span>;</span><br><span class="line">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">37px</span>;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>, font-size <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>,</span><br><span class="line">    border-color <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0.2s</span>, height <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>,</span><br><span class="line">    width <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>, line-height <span class="hljs-number">0.2s</span> linear <span class="hljs-number">0s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/Horizontal Menu.png" width="500px"><h1 id="7-Responsive-Design"><a href="#7-Responsive-Design" class="headerlink" title="7 Responsive Design"></a>7 Responsive Design</h1><h2 id="2019-6-21"><a href="#2019-6-21" class="headerlink" title="2019/6/21"></a>2019/6/21</h2><p>响应式卡片</p><img src="2019-07-03-html-css小技巧第一弹/responsive design.png" width="500px"><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 图片使用绝对定位 */</span></span><br><span class="line"><span class="hljs-comment">/* 使用odd 和 even 调整图片的位置 */</span></span><br><span class="line"><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:nth-child(odd)</span> <span class="hljs-selector-class">.thumb</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:nth-child(even)</span> <span class="hljs-selector-class">.details</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应式部分"><a href="#响应式部分" class="headerlink" title="响应式部分"></a>响应式部分</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">1000px</span>) &#123;</span><br><span class="line">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: auto;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/responsive design1.png" width="500px"><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">768px</span>) &#123;</span><br><span class="line">  <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">    <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">1s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/responsive design2.png" width="500px"><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="hljs-keyword">media</span> (max-width: <span class="hljs-number">500px</span>) &#123;</span><br><span class="line">  <span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/responsive design3.png" width="500px"><h1 id="6-CSS-3d-Layered-Image"><a href="#6-CSS-3d-Layered-Image" class="headerlink" title="6 CSS 3d Layered Image"></a>6 CSS 3d Layered Image</h1><h2 id="2019-6-19"><a href="#2019-6-19" class="headerlink" title="2019/6/19"></a>2019/6/19</h2><p>鼠标 hover 出现特效</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 使用skew产生形变 */</span></span><br><span class="line"><span class="hljs-selector-tag">transform</span>: <span class="hljs-selector-tag">rotate</span>(<span class="hljs-selector-tag">-30deg</span>) <span class="hljs-selector-tag">skew</span>(25<span class="hljs-selector-tag">deg</span>) <span class="hljs-selector-tag">scale</span>(0<span class="hljs-selector-class">.8</span>);</span><br><span class="line"><span class="hljs-comment">/* 添加4层layer，分别在hover的时候tranform就行了 */</span></span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">"res/CSS 3d Layered Image Hover Effects - CSS Isometric Design/screen.png"</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span></span></span><br><span class="line"><span class="hljs-tag">/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">"res/CSS 3d Layered Image Hover Effects - CSS Isometric Design/screen.png"</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span></span></span><br><span class="line"><span class="hljs-tag">/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">"res/CSS 3d Layered Image Hover Effects - CSS Isometric Design/screen.png"</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span></span></span><br><span class="line"><span class="hljs-tag">/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">"res/CSS 3d Layered Image Hover Effects - CSS Isometric Design/screen.png"</span></span></span><br><span class="line"><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span></span></span><br><span class="line"><span class="hljs-tag">/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 每一张图片transform不同距离 */</span></span><br><span class="line"><span class="hljs-comment">/* 给上不同透明度 */</span></span><br><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(160px, -160px);</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(120px, -120px);</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(80px, -80px);</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(40px, -40px);</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/3d-layered.png" width="500px"><h1 id="5-Thanos-Snap-Disperison"><a href="#5-Thanos-Snap-Disperison" class="headerlink" title="5 Thanos Snap Disperison"></a>5 Thanos Snap Disperison</h1><h2 id="2019-6-18"><a href="#2019-6-18" class="headerlink" title="2019/6/18"></a>2019/6/18</h2><p>灭霸响指消失特效（有点 low）</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 原理就是使用一张noise.png的噪点图覆盖原图 */</span></span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/thanos-dispersion.png" width="500px"><h1 id="4-Hover-expand-menn"><a href="#4-Hover-expand-menn" class="headerlink" title="4 Hover expand menn"></a>4 Hover expand menn</h1><h2 id="2019-6-10"><a href="#2019-6-10" class="headerlink" title="2019/6/10"></a>2019/6/10</h2><p>简单的菜单栏</p><blockquote><p>使用:target伪类来实现点击、未使用js</p></blockquote><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* </span></span><br><span class="line"><span class="hljs-comment"> * target为地址栏中的hash</span></span><br><span class="line"><span class="hljs-comment"> * 该用法能够使.item id=hash值的元素被选中</span></span><br><span class="line"><span class="hljs-comment"> * 然后使他的高度为10em</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:target</span> <span class="hljs-selector-class">.submenu</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">10em</span>;</span><br><span class="line">  <span class="hljs-comment">/* overflow: scroll; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/hover menu.png" width="500px"><h1 id="1-3-flex布局简单尝试"><a href="#1-3-flex布局简单尝试" class="headerlink" title="1-3 flex布局简单尝试"></a>1-3 flex布局简单尝试</h1><h2 id="2019-5-30"><a href="#2019-5-30" class="headerlink" title="2019/5/30"></a>2019/5/30</h2><h3 id="flex布局1"><a href="#flex布局1" class="headerlink" title="flex布局1"></a>flex布局1</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * flex中居中的方法</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: center; <span class="hljs-comment">/* 在轴的方向上使元素居中 */</span></span><br><span class="line">  <span class="hljs-attribute">align-items</span>: center;     <span class="hljs-comment">/* 垂直于flex轴居中 */</span></span><br><span class="line">  <span class="hljs-attribute">align-content</span>: center;   <span class="hljs-comment">/* 设置了flex-wrap后，使得每一行居中于该行*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> * 注意 align-self 与 align-items 的取别</span></span><br><span class="line"><span class="hljs-comment"> * align-self用于容器中的元素</span></span><br><span class="line"><span class="hljs-comment"> * align-items用于容器</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/flex1.png"><h3 id="flex布局2"><a href="#flex布局2" class="headerlink" title="flex布局2"></a>flex布局2</h3><img src="2019-07-03-html-css小技巧第一弹/flex2.png"><h3 id="flex布局3"><a href="#flex布局3" class="headerlink" title="flex布局3"></a>flex布局3</h3><img src="2019-07-03-html-css小技巧第一弹/flex3.png"><h1 id="0-Glowing-Border"><a href="#0-Glowing-Border" class="headerlink" title="0 Glowing Border"></a>0 Glowing Border</h1><h1 id="渐变色的边框"><a href="#渐变色的边框" class="headerlink" title="渐变色的边框"></a>渐变色的边框</h1><h2 id="2019-5-25"><a href="#2019-5-25" class="headerlink" title="2019/5/25"></a>2019/5/25</h2><h3 id="该方法的巧妙之处是使用了为元素-after和-before来添加边框"><a href="#该方法的巧妙之处是使用了为元素-after和-before来添加边框" class="headerlink" title="该方法的巧妙之处是使用了为元素:after和:before来添加边框"></a>该方法的巧妙之处是使用了为元素:after和:before来添加边框</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;</span><br><span class="line">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">  <span class="hljs-attribute">top</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">left</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">right</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: white;</span><br><span class="line">  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;</span><br><span class="line">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">  <span class="hljs-attribute">top</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">left</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">right</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: white;</span><br><span class="line">  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(15px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:before</span>,</span><br><span class="line"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(235deg, #d4ffa2, #f956ff, #6aeeff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="2019-07-03-html-css小技巧第一弹/glowing border.png" alt="glowing border" width="800px">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;8-Horizontal-Menu&quot;&gt;&lt;a href=&quot;#8-Horizontal-Menu&quot; class=&quot;headerlink&quot; title=&quot;8 Horizontal Menu&quot;&gt;&lt;/a&gt;8 Horizontal Menu&lt;/h1&gt;&lt;h2 id=&quot;2019-6-23&quot;&gt;&lt;a href=&quot;#2019-6-23&quot; class=&quot;headerlink&quot; title=&quot;2019/6/23&quot;&gt;&lt;/a&gt;2019/6/23&lt;/h2&gt;&lt;h3 id=&quot;水平菜单栏&quot;&gt;&lt;a href=&quot;#水平菜单栏&quot; class=&quot;headerlink&quot; title=&quot;水平菜单栏&quot;&gt;&lt;/a&gt;水平菜单栏&lt;/h3&gt;&lt;p&gt;有一些简单的动画，在别的地方看见的，就照着做了下&lt;/p&gt;
    
    </summary>
    
      <category term="布局" scheme="http://cyysilver.github.io/blog/categories/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="html" scheme="http://cyysilver.github.io/blog/tags/html/"/>
    
      <category term="css" scheme="http://cyysilver.github.io/blog/tags/css/"/>
    
      <category term="js" scheme="http://cyysilver.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>使用原生JS实现wrap与unwrap</title>
    <link href="http://cyysilver.github.io/blog/articles/2019-07-02-%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0wrap%E4%B8%8Eunwrap.html"/>
    <id>http://cyysilver.github.io/blog/articles/2019-07-02-使用原生JS实现wrap与unwrap.html</id>
    <published>2019-07-02T01:24:15.000Z</published>
    <updated>2019-08-11T09:09:36.543Z</updated>
    
    <content type="html"><![CDATA[<p>jquery中提供了.wrap()与.unwrap()方法<br>下面介绍一下原生js的实现方法</p><a id="more"></a><h2 id="使用原生JS实现wrap"><a href="#使用原生JS实现wrap" class="headerlink" title="使用原生JS实现wrap"></a>使用原生JS实现wrap</h2><ol><li>创建包裹的元素</li><li>在被包裹的节点前插入元素</li><li>将该节点移入包裹节点</li></ol><p><strong>js代码如下</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.wrap-me'</span>)</span><br><span class="line"><span class="hljs-comment">// 在该节点前插入wrapper</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">el.parentElement.insertBefore(wrapper, inner)</span><br><span class="line"><span class="hljs-comment">// 将该节点移入wrapper</span></span><br><span class="line">wrapper.appendChild(el)</span><br></pre></td></tr></table></figure><p><strong>HTML代码</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"outer"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"wrap-me"</span>&gt;</span>this is inner text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>)</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.wrap-me'</span>)</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 在该节点前插入wrapper</span></span></span><br><span class="line">el.parentElement.insertBefore(wrapper, inner)</span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 将该节点移入wrapper</span></span></span><br><span class="line">wrapper.appendChild(el)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用原生JS实现unwrap"><a href="#使用原生JS实现unwrap" class="headerlink" title="使用原生JS实现unwrap"></a>使用原生JS实现unwrap</h2><ol><li>将所有元素移出该元素</li><li>删除该元素</li></ol><p><strong>JS代码如下</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.wrapper li'</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unwrap</span>(<span class="hljs-params">ele</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">/* 父元素引用 */</span></span><br><span class="line">  <span class="hljs-keyword">const</span> parent = ele.parentElement</span><br><span class="line">  <span class="hljs-comment">/* 如果存在子元素，将其移出 */</span></span><br><span class="line">  <span class="hljs-keyword">while</span>(ele.firstChild) &#123;</span><br><span class="line">    parent.insertBefore(ele.firstChild, ele)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">/* 删除该元素 */</span></span><br><span class="line">  parent.removeChild(ele)</span><br><span class="line">&#125;</span><br><span class="line">unwrap(wrapper)</span><br></pre></td></tr></table></figure><p><strong>HTML代码如下</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=5, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"wrapper"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>I' m inside element<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>I' m outside element<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.wrapper li'</span>)</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unwrap</span>(<span class="hljs-params">ele</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">const</span> parent = ele.parentElement</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">while</span>(ele.firstChild) &#123;</span></span><br><span class="line">    parent.insertBefore(ele.firstChild, ele)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">unwrap(wrapper)</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jquery中提供了.wrap()与.unwrap()方法&lt;br&gt;下面介绍一下原生js的实现方法&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/categories/javascript/"/>
    
      <category term="dom" scheme="http://cyysilver.github.io/blog/categories/javascript/dom/"/>
    
    
      <category term="javascript" scheme="http://cyysilver.github.io/blog/tags/javascript/"/>
    
      <category term="dom" scheme="http://cyysilver.github.io/blog/tags/dom/"/>
    
  </entry>
  
</feed>
